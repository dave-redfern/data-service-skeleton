version: "3.7"

services:

  #
  # Add databases / persistence stores here. e.g. Postgres, MySQL etc.
  # You should add one per service for each unique type of storage
  #
  # Note: it is better to not share a redis instance, that is better set
  # on each service that needs it, instead of one monolithic store.
  #
  # A good convention is to prefix the service type e.g.: db-<db_name>
  #
  db-app-users:
    build:
      context: .
      dockerfile: config/docker/postgres/Dockerfile
    environment:
      POSTGRES_DB: app_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: secret
    volumes:
      - app_db:/var/lib/postgresql/data
    ports:
      - "54321:5432"
    networks:
      - backend

  #
  # Reverse proxy service
  #
  # Allows dynamically adding services and making them available via single
  # entry point. Traefik is used and listens to the docker socket to do all
  # its auto-configuration. See: https://docs.traefik.io for more.
  #
  # See the docs about service-discovery and dns in: readme-service-discovery.md
  #
  # Note: if you want to move the CLI config to a traefik.yaml file you must
  # remove all the command lines below AND the SSL config must still be loaded
  # from a separate file.
  #
  proxy:
    build:
      dockerfile: config/docker/proxy/Dockerfile
      context: .
    command:
      - --global.sendAnonymousUsage=false
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=https
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.https.address=:443
      - --providers.file.directory=/etc/traefik/dynamic_conf/
      - --providers.file.watch=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - backend
    labels:
      traefik.enable: true
      traefik.http.routers.proxy.rule: "Host(`proxy.example.dev`)"
      traefik.http.routers.proxy.tls: true
      traefik.http.services.proxy.loadbalancer.server.port: 8080

  #
  # Shared services
  #

  dns:
    build:
      context: .
      dockerfile: config/docker/dns/Dockerfile
      args:
        DNS_HOST_IP: ${DNS_HOST_IP:-127.0.0.1}
    restart: always
    ports:
      - "1034:53/udp"
      - "5380:8080"
    logging:
      options:
        max-size: 10m
    networks:
      - backend
    labels:
      traefik.enable: true
      traefik.http.routers.dns.rule: "Host(`dns.example.dev`)"
      traefik.http.routers.dns.tls: true
      traefik.http.services.dns.loadbalancer.server.port: 8080

  rabbitmq:
    image: rabbitmq:3.7-management-alpine
    environment:
      RABBITMQ_ERLANG_COOKIE: rabbitmqcookienamehere
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    ports:
      - "25673:15672"
      - "25672:5672"
    networks:
      - backend
    labels:
      traefik.enable: true
      traefik.http.routers.rabbitmq.rule: "Host(`rabbit.example.dev`)"
      traefik.http.routers.rabbitmq.tls: true
      traefik.http.services.rabbitmq.loadbalancer.server.port: 15672

  syslog:
    build:
      context: .
      dockerfile: config/docker/logger/Dockerfile
    volumes:
      - syslog_logs:/var/log/syslog-ng
    restart: always
    networks:
      - backend

#
# A named network is needed to allow other projects to tap into this network
# block and be resolved by Traefik (proxy) service.
#
networks:
  backend:
    driver: bridge
    name: app_network_backend

#
# These are docker volumes used to provide storage across container re-builds.
# Add one per persistent service and name them appropriately. Remember the
# names must be unique across all docker volumes on your system / prod.
#
# A suggested name is: the {COMPOSE_PROJECT_NAME}_volumes_<service_name>
#
volumes:
  app_db:
    name: app_volumes_app_db
  rabbitmq:
    name: app_volumes_rabbitmq
  syslog_logs:
    name: app_volumes_syslog-logs

